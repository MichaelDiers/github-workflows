# Info:
# - uses altcover for code coverage
# Usage:
# - set initial data in csproj:
# -- set Version
# - github pages 
#  - enable
#  - set source to GitHub Actions
# 
# name: <name of the workflow>
# on:
#   push:
#     paths:
#       - <path>
#   workflow_dispatch:
# permissions:
#   contents: write
#   id-token: write
#   pages: write
# jobs:
#   create-code-coverage-page:
#     uses: MichaelDiers/github-workflows/.github/workflows/dotnet-code-coverage-page.yaml@main
#     with:
#       project-name: <name of the project without .csproj>
#       test-project-name: <name of the test project without .csproj>
#       project-version: <major.minor.patch version of the project>
#       solution-directory: <the path directory that contains the solution file>
#
name: add code coverage results to github pages
on:
  workflow_call:
    inputs:
      project-name:
        required: true
        type: string
      test-project-name:
        required: true
        type: string
      solution-directory:
        required: true
        type: string
      project-version:
        required: true
        type: string
      assembly-filters:
        default: -*.Tests;-AltCover.Monitor;-*.Test;-Microsoft.*;-testhost
        type: string
      filefilters:
        default: +*
        type: string
      runs-on:
        default: ubuntu-latest
        type: string
      dotnet-version:
        default: 9.0.x
        type: string
permissions:
  contents: read
  id-token: write
  pages: write
  packages: read
jobs:
  coverage:
    runs-on: ${{inputs.runs-on}}
    env:
      ALTCOVER_XML: doc/coverage/${{inputs.test-project-name}}-altcover.xml
      SOLUTION_DIRECTORY: ${{inputs.solution-directory}}
      TEST_CSPROJ: ${{inputs.solution-directory}}/${{inputs.test-project-name}}/${{inputs.test-project-name}}.csproj
      REPORT_TARGET: doc/coverage
      ASSEMBLY_FILTERS: ${{inputs.assembly-filters}}
      FILE_FILTERS: ${{inputs.filefilters}}
      REPORT_TITLE: ${{inputs.project-name}} ${{inputs.project-version}} Code Coverage
    steps:
    - name: checkout
      uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{inputs.dotnet-version}}
        dotnet-quality: 'ga'
    - name: add github nugets
      run: dotnet nuget add source --username MichaelDiers --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/MichaelDiers/index.json"
    - name: add altcover
      run: dotnet add ${{env.TEST_CSPROJ}} package altcover
    - name: build
      run: dotnet build --configuration Release 
      working-directory: ${{env.SOLUTION_DIRECTORY}}
    - name: test
      run: dotnet test --configuration Release /p:AltCover=true --no-build --no-restore /p:AltCoverReport="../${{ env.ALTCOVER_XML }}" /p:AltCoverAssemblyFilter=xunit.*
      working-directory: ${{env.SOLUTION_DIRECTORY}}
    - name: ReportGenerator
      uses: danielpalme/ReportGenerator-GitHub-Action@5.4.4
      with:
        reports: ${{ env.ALTCOVER_XML }}
        targetdir: ${{ env.REPORT_TARGET }}
        reporttypes: Html_Dark
        assemblyfilters: ${{ env.ASSEMBLY_FILTERS }}
        filefilters: ${{ env.FILE_FILTERS }}
        title: ${{env.REPORT_TITLE}}
        working-directory: ${{env.SOLUTION_DIRECTORY}}
    - name: Setup Pages
      uses: actions/configure-pages@v4
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ${{ env.REPORT_TARGET }}
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
