# Info:
# - increases path version by 1
# - build and test solution
# Usage:
# - set initial data in csproj:
# -- set Version
# -- set PackageReadmeFile
# 
# name: <name of the workflow>
# on:
#   push:
#     paths:
#       - <path>
#   workflow_dispatch:
# jobs:
#   create-nuget:
#     uses: MichaelDiers/github-workflows/.github/workflows/dotnet-nuget.yaml@main
#     with:
#       project-name: <name of the project without .csproj>
#       solution-directory: <path to the folder that contains the solution file>
#
name: create nuget
on:
  workflow_call:
    inputs:
      project-name:
        required: true
        type: string
      solution-directory:
        required: true
        type: string
      runs-on:
        default: ubuntu-latest
        type: string
      dotnet-version:
        default: 9.0.x
        type: string
    outputs:
      new-version:
        description: "The new nuget version as major.minor.patch"
        value: ${{ jobs.create-nuget.outputs.new-version }}
permissions:
  contents: write
  packages: write
jobs:
  extract-version:
    uses: MichaelDiers/github-workflows/.github/workflows/dotnet-project-version.yaml@main
    with:
      project-path: ${{inputs.solution-directory}}/${{inputs.project-name}}/${{inputs.project-name}}.csproj
  create-nuget:
    needs: extract-version
    runs-on: ${{inputs.runs-on}}
    outputs:
      new-version: ${{ steps.output-step.outputs.NEW_VERSION }}
    env:
      CSPROJ: ${{inputs.solution-directory}}/${{inputs.project-name}}/${{inputs.project-name}}.csproj
      PUSH_SOURCE: https://nuget.pkg.github.com/${{ github.actor }}/index.json
    steps:
    - name: checkout
      uses: actions/checkout@v4
    - name: new patch version
      run: echo "NEW_PATCH=$(echo $((${{needs.extract-version.outputs.patch}}+1)))" >> $GITHUB_ENV
      shell: bash
    - name: new version
      run: echo "NEW_VERSION=${{needs.extract-version.outputs.major}}.${{needs.extract-version.outputs.minor}}.${NEW_PATCH}" >> $GITHUB_ENV
      shell: bash
    - name: new version xml
      run: echo "NEW_VERSION_XML=<Version>${NEW_VERSION}</Version>" >> $GITHUB_ENV
      shell: bash
    - name: patch nuget version
      run: sed -i "s|${{needs.extract-version.outputs.version-xml}}|${NEW_VERSION_XML}|g" ${{env.CSPROJ}}
      shell: bash
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{inputs.dotnet-version}}
    - name: add github nugets
      run: dotnet nuget add source --username MichaelDiers --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/MichaelDiers/index.json"
    - name: build
      run: dotnet build --configuration Release
      working-directory: ${{inputs.solution-directory}}
    - name: test
      run: dotnet test --configuration Release --no-build
      working-directory: ${{inputs.solution-directory}}
    - name: pack nuget
      run: dotnet pack --configuration Release --no-build --output .
      working-directory: ${{inputs.solution-directory}}
    - name: push nuget
      run: dotnet nuget push ${{inputs.project-name}}.${NEW_VERSION}.nupkg --source ${{env.PUSH_SOURCE}} --api-key ${{ secrets.GITHUB_TOKEN }}
      working-directory: ${{inputs.solution-directory}}
      shell: bash
    - name: commit version patch
      run: |
        git config --global user.name '${{ github.actor }}'
        git config --global user.email '${{ github.actor }}@users.noreply.github.com'
        git add ${{env.CSPROJ}}
        git commit -m "version update to ${NEW_VERSION}"
        git push
    - name: set outputs
      id: output-step
      run: |
        echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_OUTPUT
